---
  - name: Install any necessary dependencies (Debian)
    apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
    with_items:
      - python-httplib2
      - python-apt
      - curl
    when: ansible_os_family == "Debian"

  - name: Import InfluxDB GPG signing key (Debian)
    apt_key: url=https://repos.influxdata.com/influxdb.key state=present
    when: ansible_os_family == "Debian"

  - name: Add InfluxDB repository (Debian)
    apt_repository: repo='deb https://repos.influxdata.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ influxdb_channel }}' state=present
    when: ansible_os_family == "Debian"
    
  - name: Add InfluxDB repository file (RHEL)
    template: src=etc/yum.repos.d/influxdb.repo.j2 dest=/etc/yum.repos.d/influxdb.repo force=yes backup=yes
    when: ansible_os_family == "RedHat"

  - name: Install InfluxDB packages (Debian)
    apt: name=influxdb state=present
    when: ansible_os_family == "Debian"

  # TODO: RHEL-variant systems are migrating to DNF, so this might fail on newer machines. Need logic to account for that.
  - name: Install InfluxDB packages (RHEL)
    yum: name=influxdb state=present
    when: ansible_os_family == "RedHat"

  - name: Overwrite default configuration with parameterized template
    template: src=influxdb.conf.j2 dest=/etc/opt/influxdb/influxdb.conf force=yes backup=yes owner=influxdb group=influxdb mode=0744

  - name: Start the InfluxDB service
    service: name=influxdb state=started enabled=yes

  - name: Give the InfluxDB service a few seconds to fully start
    pause: seconds=3

  - name: Check to see which databases already exist
    command: /opt/influxdb/influx -execute 'show databases'
    register: db_listing
    when: add_demo_data

  # Todo: Parameterize database name creation (instead of hardcoding)
  - name: Create sample database
    command: /opt/influxdb/influx -execute 'CREATE DATABASE my_sample_db'
    when: add_demo_data and db_listing.stdout.find("my_sample_db") == -1

  - name: Load some test data into sample database
    uri:
      url: http://localhost:8086/write?db=my_sample_db
      method: POST
      body: "random_ints,host=server_{{ 10 | random }},az=US{{ 5 | random }} value={{ 100 | random }}"
      status_code: 204
    with_sequence: start=1 end=100
    when: add_demo_data

  # TODO: This relies on the servers being numbered in ascending order from 1 (1 being master)
  - name: Cluster InfluxDB non-primary servers
    template: src=etc/default/influxdb.j2 dest=/etc/default/influxdb force=yes backup=yes owner=root group=root mode=0644
    notify:
      - purge metaid
      - purge raftdb
      - purge peers
      - restart influxdb
    when: clustering_enabled